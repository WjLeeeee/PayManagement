-- Schema version 8

-- Category 관련 테이블
CREATE TABLE CategoryEntity (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    emoji TEXT NOT NULL,
    type TEXT NOT NULL,
    isActive INTEGER NOT NULL DEFAULT 1,
    sortOrder INTEGER NOT NULL DEFAULT 0
);

-- ParsedTransaction 관련 테이블 및 쿼리들
CREATE TABLE ParsedTransactionEntity (
    id TEXT NOT NULL PRIMARY KEY,
    amount REAL NOT NULL,
    merchantName TEXT NOT NULL,
    date TEXT NOT NULL,
    rawNotification TEXT NOT NULL,
    isProcessed INTEGER NOT NULL DEFAULT 0,
    createdAt INTEGER NOT NULL
);

CREATE TABLE TransactionEntity (
    id TEXT NOT NULL PRIMARY KEY,
    amount REAL NOT NULL,
    type TEXT NOT NULL,
    category TEXT NOT NULL,
    memo TEXT NOT NULL,
    date TEXT NOT NULL,
    incomeType TEXT,
    paymentMethod TEXT,
    balanceCardId TEXT,
    giftCardId TEXT,
    cardName TEXT,
    actualAmount REAL,
    settlementAmount REAL,
    isSettlement INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE BalanceCardEntity (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    initialAmount REAL NOT NULL,
    currentBalance REAL NOT NULL,
    createdDate TEXT NOT NULL,
    isActive INTEGER NOT NULL DEFAULT 1
);

CREATE TABLE GiftCardEntity (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    totalAmount REAL NOT NULL,
    usedAmount REAL NOT NULL,
    createdDate TEXT NOT NULL,
    isActive INTEGER NOT NULL DEFAULT 1,
    minimumUsageRate REAL NOT NULL DEFAULT 0.8
);

CREATE TABLE BudgetPlanEntity (
    id TEXT NOT NULL PRIMARY KEY,
    periodStartDate TEXT NOT NULL,
    periodEndDate TEXT NOT NULL,
    createdAt TEXT NOT NULL,
    UNIQUE(periodStartDate, periodEndDate)
);

CREATE TABLE CategoryBudgetEntity (
    id TEXT NOT NULL PRIMARY KEY,
    budgetPlanId TEXT NOT NULL,
    categoryIds TEXT NOT NULL,  -- JSON 배열 문자열 (예: ["id1"] 또는 ["id1","id2","id3"])
    categoryName TEXT NOT NULL,
    categoryEmoji TEXT NOT NULL,
    allocatedAmount REAL NOT NULL,
    FOREIGN KEY (budgetPlanId) REFERENCES BudgetPlanEntity(id) ON DELETE CASCADE
);

insertTransaction:
INSERT INTO TransactionEntity(id, amount, type, category, memo, date, incomeType, paymentMethod, balanceCardId, giftCardId, cardName, actualAmount, settlementAmount, isSettlement)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

selectAllTransactions:
SELECT * FROM TransactionEntity
ORDER BY date DESC;

selectTransactionsByDate:
SELECT * FROM TransactionEntity
WHERE date = ?
ORDER BY date DESC;

selectTransactionsByMonth:
SELECT * FROM TransactionEntity
WHERE substr(date, 1, 7) = ?
ORDER BY date DESC;

updateTransaction:
UPDATE TransactionEntity
SET amount = ?, type = ?, category = ?, memo = ?, date = ?, incomeType = ?, paymentMethod = ?, balanceCardId = ?, giftCardId = ?, cardName = ?, actualAmount = ?, settlementAmount = ?, isSettlement = ?
WHERE id = ?;

deleteTransaction:
DELETE FROM TransactionEntity
WHERE id = ?;

deleteAllTransactions:
DELETE FROM TransactionEntity;

updateTransactionsCategoryName:
UPDATE TransactionEntity
SET category = ?
WHERE category = ?;

-- BalanceCard 관련 쿼리들
insertBalanceCard:
INSERT INTO BalanceCardEntity(id, name, initialAmount, currentBalance, createdDate, isActive)
VALUES (?, ?, ?, ?, ?, ?);

selectAllBalanceCards:
SELECT * FROM BalanceCardEntity
ORDER BY createdDate DESC;

selectActiveBalanceCards:
SELECT * FROM BalanceCardEntity
WHERE isActive = 1
ORDER BY createdDate DESC;

selectBalanceCardById:
SELECT * FROM BalanceCardEntity
WHERE id = ?;

updateBalanceCard:
UPDATE BalanceCardEntity
SET name = ?, initialAmount = ?, currentBalance = ?, createdDate = ?, isActive = ?
WHERE id = ?;

updateBalanceCardBalance:
UPDATE BalanceCardEntity
SET currentBalance = ?, isActive = ?
WHERE id = ?;

deleteBalanceCard:
DELETE FROM BalanceCardEntity
WHERE id = ?;

deleteAllBalanceCards:
DELETE FROM BalanceCardEntity;

getTotalExpenseByBalanceCard:
SELECT COALESCE(SUM(amount), 0.0) AS totalExpense
FROM TransactionEntity
WHERE balanceCardId = ? AND type = 'EXPENSE';

selectTransactionsByBalanceCard:
SELECT * FROM TransactionEntity
WHERE balanceCardId = ?
ORDER BY date DESC;

-- GiftCard 관련 쿼리들
insertGiftCard:
INSERT INTO GiftCardEntity(id, name, totalAmount, usedAmount, createdDate, isActive, minimumUsageRate)
VALUES (?, ?, ?, ?, ?, ?, ?);

selectAllGiftCards:
SELECT * FROM GiftCardEntity
ORDER BY createdDate DESC;

selectActiveGiftCards:
SELECT * FROM GiftCardEntity
WHERE isActive = 1
ORDER BY createdDate DESC;

selectGiftCardById:
SELECT * FROM GiftCardEntity
WHERE id = ?;

updateGiftCard:
UPDATE GiftCardEntity
SET name = ?, totalAmount = ?, usedAmount = ?, createdDate = ?, isActive = ?, minimumUsageRate = ?
WHERE id = ?;

updateGiftCardUsage:
UPDATE GiftCardEntity
SET usedAmount = ?, isActive = ?
WHERE id = ?;

deleteGiftCard:
DELETE FROM GiftCardEntity
WHERE id = ?;

deleteAllGiftCards:
DELETE FROM GiftCardEntity;

selectTransactionsByGiftCard:
SELECT * FROM TransactionEntity
WHERE giftCardId = ?
ORDER BY date DESC;

-- ParsedTransaction 관련 쿼리들
insertParsedTransaction:
INSERT INTO ParsedTransactionEntity(id, amount, merchantName, date, rawNotification, isProcessed, createdAt)
VALUES (?, ?, ?, ?, ?, ?, ?);

selectAllParsedTransactions:
SELECT * FROM ParsedTransactionEntity
ORDER BY createdAt DESC;

selectUnprocessedParsedTransactions:
SELECT * FROM ParsedTransactionEntity
WHERE isProcessed = 0
ORDER BY createdAt DESC;

updateParsedTransactionProcessed:
UPDATE ParsedTransactionEntity
SET isProcessed = 1
WHERE id = ?;

deleteParsedTransaction:
DELETE FROM ParsedTransactionEntity
WHERE id = ?;

deleteAllParsedTransactions:
DELETE FROM ParsedTransactionEntity;

-- Category 관련 쿼리들
insertCategory:
INSERT INTO CategoryEntity(id, name, emoji, type, isActive, sortOrder)
VALUES (?, ?, ?, ?, ?, ?);

selectAllCategories:
SELECT * FROM CategoryEntity
WHERE isActive = 1
ORDER BY sortOrder ASC, name ASC;

selectCategoriesByType:
SELECT * FROM CategoryEntity
WHERE type = ? AND isActive = 1
ORDER BY sortOrder ASC, name ASC;

selectCategoryById:
SELECT * FROM CategoryEntity
WHERE id = ?;

updateCategory:
UPDATE CategoryEntity
SET name = ?, emoji = ?, type = ?, isActive = ?, sortOrder = ?
WHERE id = ?;

deleteCategory:
UPDATE CategoryEntity
SET isActive = 0
WHERE id = ?;

deleteCategoryPermanently:
DELETE FROM CategoryEntity
WHERE id = ?;

deleteAllCategories:
DELETE FROM CategoryEntity;

-- BudgetPlan 관련 쿼리들
insertBudgetPlan:
INSERT INTO BudgetPlanEntity(id, periodStartDate, periodEndDate, createdAt)
VALUES (?, ?, ?, ?);

selectBudgetPlanByPeriod:
SELECT * FROM BudgetPlanEntity
WHERE periodStartDate = ? AND periodEndDate = ?;

selectAllBudgetPlans:
SELECT * FROM BudgetPlanEntity
ORDER BY periodStartDate DESC;

deleteBudgetPlan:
DELETE FROM BudgetPlanEntity
WHERE id = ?;

deleteAllBudgetPlans:
DELETE FROM BudgetPlanEntity;

-- CategoryBudget 관련 쿼리들
insertCategoryBudget:
INSERT INTO CategoryBudgetEntity(id, budgetPlanId, categoryIds, categoryName, categoryEmoji, allocatedAmount)
VALUES (?, ?, ?, ?, ?, ?);

selectCategoryBudgetsByPlanId:
SELECT * FROM CategoryBudgetEntity
WHERE budgetPlanId = ?
ORDER BY categoryName ASC;

updateCategoryBudget:
UPDATE CategoryBudgetEntity
SET allocatedAmount = ?
WHERE id = ?;

deleteCategoryBudget:
DELETE FROM CategoryBudgetEntity
WHERE id = ?;

deleteAllCategoryBudgets:
DELETE FROM CategoryBudgetEntity;

-- 특정 기간의 카테고리별 지출 합계 조회
selectSpentAmountByCategory:
SELECT COALESCE(SUM(amount), 0.0) AS spent
FROM TransactionEntity
WHERE category = ? AND type = 'EXPENSE' AND date >= ? AND date <= ?;