package com.woojin.paymanagement.presentation.tipdonation

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.woojin.paymanagement.utils.PlatformBackHandler

/**
 * ÌåÅ Ï£ºÍ∏∞ ÌôîÎ©¥
 * Í∞úÎ∞úÏûêÎ•º ÏùëÏõêÌï† Ïàò ÏûàÎäî Í∏∞Î∂Ä ÏòµÏÖòÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TipDonationScreen(
    onNavigateBack: () -> Unit
) {
    // Android Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº Ï≤òÎ¶¨
    PlatformBackHandler(onBack = onNavigateBack)

    var selectedTipAmount by remember { mutableStateOf<TipAmount?>(null) }
    var showThankYouDialog by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("ÌåÅÏ£ºÍ∏∞") },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, "Îí§Î°úÍ∞ÄÍ∏∞")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface,
                    titleContentColor = MaterialTheme.colorScheme.onSurface
                )
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            // Ï†úÎ™©
            Text(
                text = "Í∞úÎ∞úÏûê ÏùëÏõêÌïòÍ∏∞",
                style = MaterialTheme.typography.headlineMedium,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.onSurface
            )

            // ÏÑ§Î™Ö
            Text(
                text = "Ïï±Ïù¥ ÎèÑÏõÄÏù¥ ÎêòÏÖ®ÎÇòÏöî?\nÍ∞úÎ∞úÏûêÏóêÍ≤å Ïª§Ìîº Ìïú Ïûî ÏÇ¨Ï£ºÏÑ∏Ïöî!",
                style = MaterialTheme.typography.bodyLarge,
                color = MaterialTheme.colorScheme.onSurfaceVariant,
                textAlign = TextAlign.Center
            )

            // ÌåÅ ÏòµÏÖòÎì§
            TipOption(
                emoji = "‚òï",
                title = "Ïª§Ìîº ÏÇ¨Ï£ºÍ∏∞",
                amount = TipAmount.COFFEE,
                isSelected = selectedTipAmount == TipAmount.COFFEE,
                onClick = { selectedTipAmount = TipAmount.COFFEE }
            )

            TipOption(
                emoji = "üç±",
                title = "Ï†êÏã¨ ÏÇ¨Ï£ºÍ∏∞",
                amount = TipAmount.LUNCH,
                isSelected = selectedTipAmount == TipAmount.LUNCH,
                onClick = { selectedTipAmount = TipAmount.LUNCH }
            )

            TipOption(
                emoji = "üçΩÔ∏è",
                title = "Ï†ÄÎÖÅ ÏÇ¨Ï£ºÍ∏∞",
                amount = TipAmount.DINNER,
                isSelected = selectedTipAmount == TipAmount.DINNER,
                onClick = { selectedTipAmount = TipAmount.DINNER }
            )

            Spacer(modifier = Modifier.weight(1f))

            // Í≤∞Ï†ú Î≤ÑÌäº
            Button(
                onClick = {
                    selectedTipAmount?.let {
                        // TODO: Ïã§Ï†ú Í≤∞Ï†ú Ïó∞Îèô (Google Play Billing)
                        showThankYouDialog = true
                    }
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp),
                enabled = selectedTipAmount != null,
                shape = RoundedCornerShape(12.dp)
            ) {
                Text(
                    text = selectedTipAmount?.let { "‚Ç©${it.krw} Í≤∞Ï†úÌïòÍ∏∞" } ?: "Í∏àÏï°ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
            }

            // ÏïàÎÇ¥ Î¨∏Íµ¨
            Text(
                text = "‚Äª ÌòÑÏû¨ Í≤∞Ï†ú Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.error,
                textAlign = TextAlign.Center
            )
        }
    }

    // Í∞êÏÇ¨ Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (showThankYouDialog) {
        AlertDialog(
            onDismissRequest = {
                showThankYouDialog = false
                onNavigateBack()
            },
            icon = {
                Text(
                    text = "üéâ",
                    style = MaterialTheme.typography.displayMedium
                )
            },
            title = {
                Text(
                    text = "Í∞êÏÇ¨Ìï©ÎãàÎã§!",
                    textAlign = TextAlign.Center
                )
            },
            text = {
                Text(
                    text = "Í∞úÎ∞úÏûêÎ•º ÏùëÏõêÌï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§.\nÎçî Ï¢ãÏùÄ Ïï±ÏúºÎ°ú Î≥¥ÎãµÌïòÍ≤†ÏäµÎãàÎã§!",
                    textAlign = TextAlign.Center
                )
            },
            confirmButton = {
                TextButton(onClick = {
                    showThankYouDialog = false
                    onNavigateBack()
                }) {
                    Text("ÌôïÏù∏")
                }
            }
        )
    }
}

/**
 * ÌåÅ ÏòµÏÖò Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏
 */
@Composable
private fun TipOption(
    emoji: String,
    title: String,
    amount: TipAmount,
    isSelected: Boolean,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(16.dp))
            .clickable(onClick = onClick),
        colors = CardDefaults.cardColors(
            containerColor = if (isSelected)
                MaterialTheme.colorScheme.primaryContainer
            else
                MaterialTheme.colorScheme.surfaceVariant
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = if (isSelected) 4.dp else 0.dp
        )
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Row(
                horizontalArrangement = Arrangement.spacedBy(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = emoji,
                    style = MaterialTheme.typography.headlineMedium,
                    modifier = Modifier.size(40.dp)
                )
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Medium,
                    color = if (isSelected)
                        MaterialTheme.colorScheme.onPrimaryContainer
                    else
                        MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
            Text(
                text = "‚Ç©${amount.krw}",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold,
                color = if (isSelected)
                    MaterialTheme.colorScheme.primary
                else
                    MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

/**
 * ÌåÅ Í∏àÏï° ÏòµÏÖò
 */
enum class TipAmount(val krw: String) {
    COFFEE("1,000"),
    LUNCH("5,000"),
    DINNER("10,000")
}
